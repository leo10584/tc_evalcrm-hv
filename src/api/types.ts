/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/rfps": {
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateRFPRequest"]
        }
      }
      responses: {
        201: {
          content: {
            "application/json": components["schemas"]["RFP"]
          }
        }
      }
    }
  }
  "/opportunities": {
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateOpportunityRequest"]
        }
      }
      responses: {
        201: {
          content: {
            "application/json": components["schemas"]["Opportunity"]
          }
        }
      }
    }
  }
  "/opportunities/{id}/stage": {
    patch: {
      parameters: {
        path: {
          id: string
        }
      }
      requestBody: {
        content: {
          "application/json": {
            stage: "lead" | "qualified" | "proposal" | "negotiation" | "closed_won" | "closed_lost"
          }
        }
      }
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["Opportunity"]
          }
        }
      }
    }
  }
  "/quotes": {
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateQuoteRequest"]
        }
      }
      responses: {
        201: {
          content: {
            "application/json": components["schemas"]["Quote"]
          }
        }
      }
    }
  }
  "/quotes/{id}/send": {
    post: {
      parameters: {
        path: {
          id: string
        }
      }
      requestBody: {
        content: {
          "application/json": {
            recipientEmail: string
            message: string
          }
        }
      }
      responses: {
        200: {
          description: string
        }
      }
    }
  }
  "/quotes/{id}/esign": {
    post: {
      parameters: {
        path: {
          id: string
        }
      }
      requestBody: {
        content: {
          "application/json": {
            signerEmail: string
            signerName: string
          }
        }
      }
      responses: {
        200: {
          content: {
            "application/json": {
              envelopeId: string
              signingUrl: string
            }
          }
        }
      }
    }
  }
  "/esign/webhook": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            envelopeId: string
            status: "sent" | "delivered" | "signed" | "completed" | "declined" | "voided"
          }
        }
      }
      responses: {
        200: {
          description: string
        }
      }
    }
  }
  "/email/threads/{entityType}/{entityId}": {
    get: {
      parameters: {
        path: {
          entityType: "opportunity" | "quote"
          entityId: string
        }
      }
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["EmailMessage"][]
          }
        }
      }
    }
  }
  "/audit": {
    get: {
      parameters: {
        query?: {
          entityType?: string
          entityId?: string
          limit?: number
          offset?: number
        }
      }
      responses: {
        200: {
          content: {
            "application/json": {
              events: components["schemas"]["AuditEvent"][]
              total: number
            }
          }
        }
      }
    }
  }
}

export interface components {
  schemas: {
    CreateRFPRequest: {
      accountName: string
      summary: string
      scopeItems: string[]
      contactEmail?: string
      contactPhone?: string
    }
    RFP: {
      id?: string
      accountName?: string
      summary?: string
      scopeItems?: string[]
      contactEmail?: string
      contactPhone?: string
      createdAt?: string
      opportunityId?: string
    }
    CreateOpportunityRequest: {
      name: string
      accountName: string
      stage: "lead" | "qualified" | "proposal" | "negotiation" | "closed_won" | "closed_lost"
      value: number
      currency?: string
      ownerId?: string
      rfpId?: string
    }
    Opportunity: {
      id?: string
      name?: string
      accountName?: string
      stage?: string
      value?: number
      currency?: string
      ownerId?: string
      rfpId?: string
      createdAt?: string
      updatedAt?: string
    }
    CreateQuoteRequest: {
      opportunityId: string
      templateId?: string
      lineItems: components["schemas"]["LineItem"][]
      gstDetails: components["schemas"]["GSTDetails"]
      approvalRequired?: boolean
    }
    Quote: {
      id?: string
      opportunityId?: string
      templateId?: string
      lineItems?: components["schemas"]["LineItem"][]
      subtotal?: number
      gstDetails?: components["schemas"]["GSTDetails"]
      totalAmount?: number
      currency?: string
      status?: "draft" | "sent" | "signed" | "expired"
      approvalStatus?: "pending" | "approved" | "rejected"
      createdAt?: string
      pdfUrl?: string
      htmlUrl?: string
      envelopeId?: string
    }
    LineItem: {
      id?: string
      description: string
      quantity: number
      unitPrice: number
      total?: number
      taxable?: boolean
    }
    GSTDetails: {
      cgst?: number
      sgst?: number
      igst?: number
      totalGst?: number
      gstNumber?: string
      placeOfSupply?: string
    }
    EmailMessage: {
      id?: string
      from?: string
      to?: string[]
      subject?: string
      body?: string
      timestamp?: string
      attachments?: {
        name?: string
        url?: string
      }[]
    }
    AuditEvent: {
      id?: string
      entityType?: string
      entityId?: string
      action?: string
      userId?: string
      userEmail?: string
      timestamp?: string
      details?: Record<string, never>
      intentId?: string
    }
  }
}

export type operations = Record<string, never>
